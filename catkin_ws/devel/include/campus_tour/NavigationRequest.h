// Generated by gencpp from file campus_tour/NavigationRequest.msg
// DO NOT EDIT!


#ifndef CAMPUS_TOUR_MESSAGE_NAVIGATIONREQUEST_H
#define CAMPUS_TOUR_MESSAGE_NAVIGATIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace campus_tour
{
template <class ContainerAllocator>
struct NavigationRequest_
{
  typedef NavigationRequest_<ContainerAllocator> Type;

  NavigationRequest_()
    : visitor_id()
    , building_id()  {
    }
  NavigationRequest_(const ContainerAllocator& _alloc)
    : visitor_id(_alloc)
    , building_id(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _visitor_id_type;
  _visitor_id_type visitor_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _building_id_type;
  _building_id_type building_id;





  typedef boost::shared_ptr< ::campus_tour::NavigationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::campus_tour::NavigationRequest_<ContainerAllocator> const> ConstPtr;

}; // struct NavigationRequest_

typedef ::campus_tour::NavigationRequest_<std::allocator<void> > NavigationRequest;

typedef boost::shared_ptr< ::campus_tour::NavigationRequest > NavigationRequestPtr;
typedef boost::shared_ptr< ::campus_tour::NavigationRequest const> NavigationRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::campus_tour::NavigationRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::campus_tour::NavigationRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::campus_tour::NavigationRequest_<ContainerAllocator1> & lhs, const ::campus_tour::NavigationRequest_<ContainerAllocator2> & rhs)
{
  return lhs.visitor_id == rhs.visitor_id &&
    lhs.building_id == rhs.building_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::campus_tour::NavigationRequest_<ContainerAllocator1> & lhs, const ::campus_tour::NavigationRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace campus_tour

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::campus_tour::NavigationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::campus_tour::NavigationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campus_tour::NavigationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campus_tour::NavigationRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campus_tour::NavigationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campus_tour::NavigationRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::campus_tour::NavigationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2fa5e4010f01de8a50c1eaada5e59e13";
  }

  static const char* value(const ::campus_tour::NavigationRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2fa5e4010f01de8aULL;
  static const uint64_t static_value2 = 0x50c1eaada5e59e13ULL;
};

template<class ContainerAllocator>
struct DataType< ::campus_tour::NavigationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "campus_tour/NavigationRequest";
  }

  static const char* value(const ::campus_tour::NavigationRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::campus_tour::NavigationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string visitor_id\n"
"string building_id\n"
;
  }

  static const char* value(const ::campus_tour::NavigationRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::campus_tour::NavigationRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.visitor_id);
      stream.next(m.building_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavigationRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::campus_tour::NavigationRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::campus_tour::NavigationRequest_<ContainerAllocator>& v)
  {
    s << indent << "visitor_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.visitor_id);
    s << indent << "building_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.building_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMPUS_TOUR_MESSAGE_NAVIGATIONREQUEST_H
