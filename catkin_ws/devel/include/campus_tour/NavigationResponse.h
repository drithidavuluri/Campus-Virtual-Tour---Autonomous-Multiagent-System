// Generated by gencpp from file campus_tour/NavigationResponse.msg
// DO NOT EDIT!


#ifndef CAMPUS_TOUR_MESSAGE_NAVIGATIONRESPONSE_H
#define CAMPUS_TOUR_MESSAGE_NAVIGATIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace campus_tour
{
template <class ContainerAllocator>
struct NavigationResponse_
{
  typedef NavigationResponse_<ContainerAllocator> Type;

  NavigationResponse_()
    : success(false)
    , path()
    , denial_reason()  {
    }
  NavigationResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , path(_alloc)
    , denial_reason(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _path_type;
  _path_type path;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _denial_reason_type;
  _denial_reason_type denial_reason;





  typedef boost::shared_ptr< ::campus_tour::NavigationResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::campus_tour::NavigationResponse_<ContainerAllocator> const> ConstPtr;

}; // struct NavigationResponse_

typedef ::campus_tour::NavigationResponse_<std::allocator<void> > NavigationResponse;

typedef boost::shared_ptr< ::campus_tour::NavigationResponse > NavigationResponsePtr;
typedef boost::shared_ptr< ::campus_tour::NavigationResponse const> NavigationResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::campus_tour::NavigationResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::campus_tour::NavigationResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::campus_tour::NavigationResponse_<ContainerAllocator1> & lhs, const ::campus_tour::NavigationResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.path == rhs.path &&
    lhs.denial_reason == rhs.denial_reason;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::campus_tour::NavigationResponse_<ContainerAllocator1> & lhs, const ::campus_tour::NavigationResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace campus_tour

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::campus_tour::NavigationResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::campus_tour::NavigationResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campus_tour::NavigationResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::campus_tour::NavigationResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campus_tour::NavigationResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::campus_tour::NavigationResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::campus_tour::NavigationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "63bc79389dc77a49a67022340f72da88";
  }

  static const char* value(const ::campus_tour::NavigationResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x63bc79389dc77a49ULL;
  static const uint64_t static_value2 = 0xa67022340f72da88ULL;
};

template<class ContainerAllocator>
struct DataType< ::campus_tour::NavigationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "campus_tour/NavigationResponse";
  }

  static const char* value(const ::campus_tour::NavigationResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::campus_tour::NavigationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"string path\n"
"string denial_reason\n"
;
  }

  static const char* value(const ::campus_tour::NavigationResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::campus_tour::NavigationResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.path);
      stream.next(m.denial_reason);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavigationResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::campus_tour::NavigationResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::campus_tour::NavigationResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.path);
    s << indent << "denial_reason: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.denial_reason);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMPUS_TOUR_MESSAGE_NAVIGATIONRESPONSE_H
